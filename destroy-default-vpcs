#!/usr/bin/env bash

main() {
    local profile_name

    echo -n "Enter Profile Name: "
    read profile_name
    echo ""

    if [ -e ~/.aws/${profile_name} ]; then
        . ~/.aws/${profile_name}
    else
        echo "No ~/.aws/${profile_name} to source, using shell variables instead" 1>&2
    fi

    local role_arn="${AWS_MFA_ROLE_ARN:-}"
    local serial_number="${AWS_MFA_ARN:-}"
    local token_code

    if [ -z "${role_arn}" ]; then
        echo "Set the AWS_MFA_ROLE_ARN environment variable" 1>&2
        return 1
    fi

    if [ -z "${serial_number}" ]; then
        echo "Set the AWS_MFA_ARN environment variable" 1>&2
        return 1
    fi

    echo -n "Enter MFA Code: "
    read token_code

    # NOTE: The keys should not be exported as AWS_ACCESS_KEY_ID
    # or AWS_SECRET_ACCESS_KEY_ID. This will not work. They
    # should be exported as other names which can be used below. This prevents
    # them from incorrectly being picked up from libraries or commands.
    temporary_credentials="$(aws \
        --profile "${profile_name}" \
        sts assume-role \
        --role-arn="${role_arn}" \
        --serial-number="${serial_number}" \
        --token-code="${token_code}" \
        --role-session-name="terraform-access"
    )"

    unset AWS_PROFILE

    export "AWS_ACCESS_KEY_ID=$(echo "${temporary_credentials}" | jq -re '.Credentials.AccessKeyId')"
    export "AWS_SECRET_ACCESS_KEY=$(echo "${temporary_credentials}" | jq -re '.Credentials.SecretAccessKey')"
    export "AWS_SESSION_TOKEN=$(echo "${temporary_credentials}" | jq -re '.Credentials.SessionToken')"

    for region in `aws ec2 describe-regions --region us-east-1 | jq -re '.Regions' | jq -rc '.[] | .RegionName'` 
    do
	    VPCS="$(aws ec2 describe-vpcs --region $region)"
	    for vpc in `echo $VPCS | jq -re '.Vpcs' | jq -rc '.[]'`
	    do
		    ID="$(echo $vpc | jq -re '.VpcId')"
		    DEFAULT="$(echo $vpc | jq -re '.IsDefault')"
		    if [[ $DEFAULT == "true" ]]; then
			    for subnet in `aws ec2 describe-subnets --region $region | jq -re '.Subnets' | jq -rc '.[]'`
			    do
				    subnetid="$(echo $subnet | jq -re '.SubnetId')"
				    svpc="$(echo $subnet | jq -re '.VpcId')"
				    if [[ $svpc == $ID ]]; then
					    aws ec2 delete-subnet --region $region --subnet-id=$subnetid --dry-run
				    fi
			    done
			    for gateway in `aws ec2 describe-internet-gateways --region $region | jq -re '.InternetGateways' | jq -rc '.[]'`
			    do
				    gatewayid="$(echo $gateway | jq -re '.InternetGatewayId')"
				    for attachment in `echo $gateway | jq -re '.Attachments' | jq -rc '.[]'`
				    do
					    gvpc="$(echo $attachment | jq -re '.VpcId')"
					    if [[ $gvpc == $ID ]]; then
						    aws ec2 delete-internet-gateway --region $region --internet-gateway-id=$gatewayid --dry-run
						    break
					    fi
				    done

				    if [[ $svpc == $ID ]]; then
					    aws ec2 delete-subnet --region $region --subnet-id=$subnetid --dry-run
				    fi
			    done
			    aws ec2 delete-vpc --region $region --vpc-id=$ID --dry-run
		    fi
	    done
    done

}


main "$@"
